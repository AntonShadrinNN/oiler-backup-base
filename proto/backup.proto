syntax = "proto3";

package backup;

option go_package = "./";

message BackupRequest {
  string db_uri = 1;           // URI базы данных
  int64 db_port = 2;           // Порт базы данных
  string db_user = 3;          // Пользователь базы данных
  string db_pass = 4;          // Пароль пользователя
  string db_name = 5;          // Имя базы данных
  string database_type = 6;    // Тип базы данных (например, postgres)
  string schedule = 7;         // Расписание бэкапов (cron-формат)
  string storage_class = 8;    // Класс хранилища (например, s3)

  // Параметры MinIO (S3)
  string s3_endpoint = 9;      // Endpoint MinIO (например, http://minio-service:9000)
  string s3_access_key = 10;   // Access Key для MinIO
  string s3_secret_key = 11;   // Secret Key для MinIO
  string s3_bucket_name = 12;  // Имя бакета в MinIO

  string core_addr = 13; // Адрес core
}

message BackupResponse {
  string status = 1;           // Статус выполнения операции
  string cronjob_name = 2;     // Имя созданного CronJob
  string cronjob_namespace = 3;// Namespace CronJob
}

message BackupRestore {
  string db_uri = 1;           // URI базы данных
  int64 db_port = 2;           // Порт базы данных
  string db_user = 3;          // Пользователь базы данных
  string db_pass = 4;          // Пароль пользователя
  string db_name = 5;          // Имя базы данных
  string database_type = 6;    // Тип базы данных (например, postgres)

  // Параметры MinIO (S3)
  string s3_endpoint = 9;      // Endpoint MinIO (например, http://minio-service:9000)
  string s3_access_key = 10;   // Access Key для MinIO
  string s3_secret_key = 11;   // Secret Key для MinIO
  string s3_bucket_name = 12;  // Имя бакета в MinIO

  string backupRevision = 13; // Версия бэкапа для восстановления
}

message BackupRestoreResponse {
  string status = 1;           // Статус выполнения операции
  string job_name = 2;     // Имя созданного Job
  string job_namespace = 3;// Namespace Job
}

message MetricsRequest {
  string database_type = 1;    // Тип базы данных (например, postgres)
}

message MetricsResponse {
  int32 successful_backups = 1; // Количество успешных бэкапов
  int32 failed_backups = 2;     // Количество неуспешных бэкапов
}

service BackupService {
  rpc Backup(BackupRequest) returns (BackupResponse);
  rpc Restore(BackupRestore) returns (BackupRestoreResponse);
  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
}